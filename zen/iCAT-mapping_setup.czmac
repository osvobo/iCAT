<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text># Author     : Ondrej Svoboda
# Date       : 09.01.2025
# Institution : IMG
# Based on: https://github.com/zeiss-microscopy/OAD/blob/master/Scripts/Hardware_and_Acquisition/lls7/LLS7_MultiPosition_v1.0.py
# Use at your own Risk !!!
# Compatible with ZEN versions 3.6 and higher

import time
import os
import math
from datetime import datetime
from System.IO import File, Directory, Path
version = 1.0
Zen.Application.MacroEditor.ClearMessages()


iCATfolder = 'C:\Users\zeiss\Documents\GitHub\iCat' #change this to what ever default location
inputPath = 'logs\\rotate'
outputPath = 'logs\\zeiss_setup'


# initialize dialog, add components
Dialog = ZenWindow()
Dialog.Initialize('iCAT Axial mapping plug-in - setup' + str(version))
Dialog.AddTextBox('Positions', '1) Number of Positions to record', 2)
Dialog.AddFolderBrowser('baseFolder', '2) Specify iCAT temp folder:', iCATfolder)


# show dialog
result = Dialog.Show()
if result.HasCanceled:
    print('Macro was canceled by user.')
    raise SystemExit


# dialog values
P = result.GetValue('Positions')
iCATfolder = result.GetValue('baseFolder')


def dircheck(baseFolder, relativeFolder):
    base_exists = Directory.Exists(baseFolder)
    if base_exists:
        newdir = createfolder(baseFolder, relativeFolder)
        print((relativeFolder, 'folder exists: ', base_exists))
    if not base_exists:
        print('folder does not exists: ', baseFolder)
        sys.exit(1) 
    return


def createfolder(basePath, relativePath):
    newdir = Path.Combine(basePath, relativePath)
    try:
        newdir_exists = Directory.Exists(newdir)
        if not newdir_exists:
            Directory.CreateDirectory(newdir)
            print(('Created new directory: ', newdir))
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise  # This was not a "directory exist" error..
    return newdir


def get_newest_inputFile(folder):
    try:
        files = Directory.GetFiles(folder)
        if not files:
            return None
        newest_file = max(files, key=os.path.getmtime)
        return newest_file
    except Exception as e:
        print("Error while accessing files: %s" % str(e))
        return None


def get_newest_angle(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
            if not lines:
                return None
            last_line = lines[-1].strip()  # Get the last line and remove any extra whitespace
            if "Motor1:" in last_line:
                value = last_line.split("Motor1:")[-1].strip()  # Extract the value
                return value
            else:
                print("No 'Motor1:' value found in the last line.")
                return None
    except Exception as e:
        print("Error while reading file: %s" % str(e))
        return None


def write_to_log(message):
    timestamp = datetime.now().strftime('%H:%M:%S')
    full_message = "%s %s\n" % (timestamp, message)  # Format message with timestamp
    try:
        log_file_handle = open(log_file, 'a')  # Open log file in append mode
        log_file_handle.write(full_message)
        log_file_handle.close()  # Explicitly close the file
    except Exception as e:
        print("Failed to write to log file: %s" % str(e))


timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
dircheck(iCATfolder, inputPath)
dircheck(iCATfolder, outputPath)
log_file = os.path.join(iCATfolder, outputPath, 'positions_{}.txt'.format(timestamp))


Zen.Application.Pause("setup initial angle and position")
for k in range (0, P):
    newest_file = get_newest_inputFile(Path.Combine(iCATfolder, inputPath))

    if newest_file:
        print("newest input log file: %s" % newest_file)
        value = get_newest_angle(newest_file)
        if value:
            globals()['angle' + str(k+1)] = value
        else:
            print("No motor1 value available in the input file")
            sys.exit(1) 
    else:
        print("Input folder empty, check path for iCAT rotate log")
        sys.exit(1) 
    
    print("angle%s: %s" % (k+1, globals()['angle' + str(k+1)]))
    write_to_log("angle%s: %s" % (k+1, globals()['angle' + str(k+1)]))
    
    
    # get positions from user
    #Zen.Application.Pause("Center and focus on position %s" % str(k+1))
    globals()['x' + str(k+1)] = Zen.Devices.Stage.ActualPositionX
    globals()['y' + str(k+1)] = Zen.Devices.Stage.ActualPositionY
    globals()['z' + str(k+1)] = Zen.Devices.Focus.ActualPosition
    
    #globals()['x' + str(k+1)] = 10
    #globals()['y' + str(k+1)] = 20
    #globals()['z' + str(k+1)] = 0
    
    
    print("x%s: %s" % (k+1, globals()['x' + str(k+1)]))
    print("y%s: %s" % (k+1, globals()['y' + str(k+1)]))
    print("z%s: %s" % (k+1, globals()['z' + str(k+1)]))
    write_to_log("x%s: %s" % (k+1, globals()['x' + str(k+1)]))
    write_to_log("y%s: %s" % (k+1, globals()['y' + str(k+1)]))
    write_to_log("z%s: %s" % (k+1, globals()['z' + str(k+1)]))
    
    if k &lt; P - 1:
        Zen.Application.Pause("Position %s set, set up angle and position %s" % (str(k+1), str(k+2)))
#    else:
#        # Last iteration, show a custom message
#        Zen.Application.Pause("Position %s set, start imaging" % str(k+1))


print("Compute model:")
def calculate_circle_properties(y1, z1, y2, z2, diff):
    # Normalize the angle to the range [0, 360) degrees

    if math.floor(diff/180) % 2 == 0:
        chord = 1
    else:
        chord = 0

    diff = diff % 360

    # Convert angle from degrees to radians
    diff_rad = math.radians(diff)

    # Convert coordinates to floats
    y1 = float(y1)
    y2 = float(y2)
    z1 = float(z1)
    z2 = float(z2)
    
    # Midpoint of AB
    my = (y1 + y2) / 2
    mz = (z1 + z2) / 2

    # Length of AB (chord length)
    ab_length = math.sqrt((y2 - y1)**2 + (z2 - z1)**2)

    # Handle special case where alpha is 0 (no valid circle)
    if diff == 0:
        raise ValueError("Diff angle cannot be 0 degrees.")

    # Handle special case where alpha is 180 (center is midpoint, radius is half the distance)
    if diff == 180:
        r = ab_length / 2
        return my, mz, 2 * r

    # Radius of the circle
    r = (ab_length / 2) / math.sin(diff_rad / 2)

     # Perpendicular bisector direction
    dy = y2 - y1
    dz = z2 - z1

    # Perpendicular direction
    perp_dy = -dz
    perp_dz = dy

    # Normalize the perpendicular direction
    #d_length = math.sqrt(perp_dy**2 + perp_dz**2)
    perp_dy /= ab_length
    perp_dz /= ab_length

    # Distance from midpoint to the center
    h = math.sqrt(r**2 - (ab_length / 2)**2)

    # Center of the circle (two possible solutions, above or below the chord)
    if chord == 1:
        cy = my + perp_dy * h
        cz = mz + perp_dz * h
    else:
        cy = my - perp_dy * h
        cz = mz - perp_dz * h

    # Diameter of the circle
    diameter = 2 * r

    #return (cz1, cz1), (cz2, cz2), diameter
    return cy, cz, diameter

#angle1=0
#angle2=90
#y1 = 0
#z1 = 3
#y2 = 3
#z2 = 0

diff = int(angle2) - int(angle1)
Cy, Cz, d = calculate_circle_properties(y1, z1, y2, z2, diff)
print("Center of the circle: %s, %s" % (Cy, Cz))
print("Diameter of the circle: %s" % d)

write_to_log("Cy: %s" % Cy)
write_to_log("Cz: %s" % Cz)
write_to_log("d: %s" % d)
</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>151</Row>
  <Column>74</Column>
  <WatchVariables>
    <Watch></Watch>
  </WatchVariables>
</Script>