<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text># Author     : Ondrej Svoboda
# Date       : 09.01.2025
# Institution : IMG
# Based on: https://github.com/zeiss-microscopy/OAD/blob/master/Scripts/Hardware_and_Acquisition/lls7/LLS7_MultiPosition_v1.0.py
# Use at your own Risk !!!
# Compatible with ZEN versions 3.6 and higher

import threading
import time
import os
import re
import math
from datetime import datetime
from System.IO import File, Directory, Path
from collections import namedtuple
version = 1.0
Zen.Application.MacroEditor.ClearMessages()


iCATfolder = 'C:\Users\zeiss\Documents\GitHub\iCat' #change this to what ever default location
inputPath = 'logs\\zeiss_setup'
outputPath = 'logs\\zeiss_sync'
anglePath = 'logs\\rotate'


# initialize dialog, add components
Dialog = ZenWindow()
Dialog.Initialize('iCAT Axial mapping plug-in - sync' + str(version))
Dialog.AddFolderBrowser('baseFolder', 'Specify iCAT temp folder:', iCATfolder)


# show dialog
#result = Dialog.Show()
#if result.HasCanceled:
#    print('Macro was canceled by user.')
#    raise SystemExit

# dialog values
#iCATfolder = result.GetValue('baseFolder')


def dircheck(baseFolder, relativeFolder):
    base_exists = Directory.Exists(baseFolder)
    if base_exists:
        newdir = createfolder(baseFolder, relativeFolder)
        print((relativeFolder, 'folder exists: ', base_exists))
    if not base_exists:
        print('folder does not exists: ', baseFolder)
        sys.exit(1) 
    return


def createfolder(basePath, relativePath):
    newdir = Path.Combine(basePath, relativePath)
    try:
        newdir_exists = Directory.Exists(newdir)
        if not newdir_exists:
            Directory.CreateDirectory(newdir)
            print(('Created new directory: ', newdir))
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise  # This was not a "directory exist" error..
    return newdir


def get_newest_inputFile(folder):
    try:
        files = Directory.GetFiles(folder)
        if not files:
            return None
        newest_file = max(files, key=os.path.getmtime)
        return newest_file
    except Exception as e:
        print("Error while accessing files: %s" % str(e))
        return None


def write_to_log(message):
    timestamp = datetime.now().strftime('%H:%M:%S')
    full_message = "%s %s\n" % (timestamp, message)  # Format message with timestamp
    try:
        log_file_handle = open(log_file, 'a')  # Open log file in append mode
        log_file_handle.write(full_message)
        log_file_handle.close()  # Explicitly close the file
    except Exception as e:
        print("Failed to write to log file: %s" % str(e))


def get_newest_values(file_path):
    try:
        with open(file_path, 'r') as file:  # Use the file path passed to the function
            log_data = file.read()  # Read the entire content of the file
    except Exception as e:
        print("Failed to read log file: %s" % str(e))
        log_data = None
    
    if log_data:
        # Define a dictionary to store the extracted values
        extracted_values = {}
        
        # Match variables using regex for each angle and coordinate
        for match in re.finditer(r'(angle\d+|x\d+|y\d+|z\d+|Cy|Cz|d):\s*(-?\d+\.?\d*(?:[eE][+-]?\d+)?)', log_data):
        #for match in re.finditer(r'(Cy|Cz|d):\s*(-?\d+\.?\d*)', log_data):
            variable_name = match.group(1)
            value = float(match.group(2))
            print(variable_name, value)
            extracted_values[variable_name] = value  # Store the value in dictionary
        
        # Print extracted values (optional)
        for var, val in extracted_values.items():
            #print("var: %s" % var)
            #print("val: %s" % val)
            write_to_log("%s: %s" %(var, val))
            
            globals()[var] = val
            
    
        return extracted_values
    else:
        return None


def get_newest_angle(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
            if not lines:
                return None
            last_line = lines[-1].strip()  # Get the last line and remove any extra whitespace
            if "Motor1:" in last_line:
                value = last_line.split("Motor1:")[-1].strip()  # Extract the value
                return value
            else:
                print("No 'Motor1:' value found in the last line.")
                return None
    except Exception as e:
        print("Error while reading file: %s" % str(e))
        return None


timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
dircheck(iCATfolder, inputPath)
dircheck(iCATfolder, outputPath)
log_file = os.path.join(iCATfolder, outputPath, 'log_{}.txt'.format(timestamp))
newest_file = get_newest_inputFile(Path.Combine(iCATfolder, inputPath))

if newest_file:
    print("newest input log file: %s" % newest_file)
    value = get_newest_values(newest_file)
    if value:
        print("Values found")
    else:
        print("Zeiss setup file empty")
        sys.exit(1) 
else:
    print("Zeiss setup folder empty, run setup first")
    sys.exit(1) 


def calculate_point_on_circle(cy, cz, r, new_angle):
    angle1_rad = math.atan2(y1 - cy, z1 - cz)  # atan2 gives the angle in radians
    angle1_deg = math.degrees(angle1_rad)
    #print(angle1_deg)
    new_angle = new_angle - angle1
    print(new_angle)
    new_angle = new_angle % 360
    print(new_angle)
    angle_coef = angle2-angle1
    diff_angle = -1* angle1_deg + 90
    
    
    if angle_coef &lt;= 180:
        if (new_angle &lt;= angle_coef):
            ax = ((360-angle_coef) * new_angle / angle_coef)
        else:
            ax = (360 - angle_coef) + (angle_coef) / (360 - angle_coef) * (new_angle - angle_coef)
        
    else:
        if (new_angle &lt;= angle_coef):
            ax = (360 - angle_coef) + (angle_coef) / (360 - angle_coef) * (new_angle - angle_coef)
        else:
            ax = ((360-angle_coef) * new_angle / angle_coef)
        
        
        
    print('ax')
    print(ax)
    diff_angle = diff_angle + ax
    
    # Convert angle delta from degrees to radians
    diff_angle_rad = math.radians(diff_angle)

    # Calculate the coordinates of the new point
    y = cy + r * math.cos(diff_angle_rad)
    z = cz + r * math.sin(diff_angle_rad)

    return y, z


# Function to repeatedly print "running"
def repeat_task(stop_event):
    while not stop_event.is_set():  # Run until the stop_event is triggered
        print("running")
        write_to_log("")
        write_to_log("SYNC values:")
        time.sleep(1)  # 500ms delay
        newest_file = get_newest_inputFile(Path.Combine(iCATfolder, anglePath))
        if newest_file:
            print("newest input log file: %s" % newest_file)
            value = get_newest_angle(newest_file)
            write_to_log("newest angle: %s" %(value))
            if value:
                new_angle = float(value)
            else:
                print("No motor1 value available in the input file")
                sys.exit(1) 
        else:
            print("Input folder empty, check path for iCAT rotate log")
            sys.exit(1) 

        #angle = 0
        print("new angle: %s" % new_angle)
        y, z = calculate_point_on_circle(Cy, Cz, d/2, new_angle)
        write_to_log("y: %s" %(y))
        write_to_log("z: %s" %(z))
        print(y, z)


        #Zen.Devices.Stage.TargetPositionX = 665
        Zen.Devices.Stage.TargetPositionY = y
        Zen.Devices.Focus.TargetPosition = z
        Zen.Devices.Stage.Apply()
        Zen.Devices.Focus.Apply()

# Initialize the dialog
Dialog = ZenWindow()
Dialog.Initialize('iCAT Axial mapping plug-in - sync' + str(version))


# Create a threading event to control the loop
stop_event = threading.Event()
thread = threading.Thread(target=repeat_task, args=(stop_event,))
thread.start()  # Start the loop in a separate thread

# Show dialog and handle user input
result = Dialog.Show()

# Stop the thread based on user action
if result.HasCanceled:
    print('Macro was canceled by user.')
else:
    print('Macro completed successfully.')

# Stop the loop thread
stop_event.set()
thread.join()  # Ensure the thread finishes before exiting




</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>184</Row>
  <Column>9</Column>
</Script>